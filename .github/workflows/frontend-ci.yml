name: Frontend CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/web/**'
      - '.github/workflows/frontend-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/web/**'
      - '.github/workflows/frontend-ci.yml'

env:
  NODE_VERSION: '18.x'
  REGISTRY: 'ghcr.io'
  IMAGE_NAME: '${{ github.repository }}/frontend'

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        working-directory: src/web
        
      - name: Run ESLint
        run: npm run lint
        working-directory: src/web
        
      - name: Check formatting
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,scss,md}"
        working-directory: src/web
        
      - name: Type check
        run: npx tsc --noEmit
        working-directory: src/web

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        working-directory: src/web
        
      - name: Check for vulnerabilities
        run: npm audit --production
        working-directory: src/web
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          queries: security-and-quality
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        working-directory: src/web
        
      - name: Run unit tests
        run: npm run test:coverage -- --watchAll=false
        working-directory: src/web
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-coverage
          path: src/web/coverage

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'src/web/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        working-directory: src/web
        
      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: src/web
          build: npm run build
          start: npm start
          wait-on: http://localhost:3000
          browser: chrome
          headless: true
          
      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cypress-artifacts
          path: src/web/cypress/videos

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan, unit-tests, e2e-tests]
    if: "github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            latest
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          file: src/web/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            REACT_APP_API_URL=/api/v1
            REACT_APP_ENV=production