version: '3.8'

services:
  # Laravel backend application with API services
  backend:
    build:
      context: ../../src/backend
      dockerfile: docker/Dockerfile
      target: final
      args:
        APP_ENV: production
        APP_DEBUG: 'false'
    volumes:
      - backend-storage:/var/www/html/storage
    environment:
      APP_ENV: production
      APP_DEBUG: false
      APP_URL: https://admissions.example.edu
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: admissions_platform
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_ENCRYPTION: tls
      MAIL_FROM_ADDRESS: noreply@admissions.example.edu
      MAIL_FROM_NAME: Admissions
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      CACHE_DRIVER: redis
      FILESYSTEM_DISK: s3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_BUCKET: ${AWS_BUCKET}
      AWS_URL: ${AWS_URL}
      LOG_CHANNEL: stack
      LOG_LEVEL: warning
    depends_on:
      - mysql
      - redis
    networks:
      - admissions-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Laravel queue worker for background processing
  queue-worker:
    build:
      context: ../../src/backend
      dockerfile: docker/Dockerfile
      target: final
      args:
        APP_ENV: production
        APP_DEBUG: 'false'
    volumes:
      - backend-storage:/var/www/html/storage
    command: ["php", "artisan", "queue:work", "--queue=high,default,documents,integrations", "--tries=3", "--backoff=3", "--sleep=3", "--max-time=3600"]
    environment:
      APP_ENV: production
      APP_DEBUG: false
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: admissions_platform
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      CACHE_DRIVER: redis
      FILESYSTEM_DISK: s3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      AWS_BUCKET: ${AWS_BUCKET}
      AWS_URL: ${AWS_URL}
      LOG_CHANNEL: stack
      LOG_LEVEL: warning
    depends_on:
      - mysql
      - redis
      - backend
    networks:
      - admissions-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: '1G'
        reservations:
          cpus: '0.5'
          memory: '512M'

  # React frontend application served by Nginx
  frontend:
    build:
      context: ../../src/web
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_BASE_URL: https://admissions.example.edu/api
        REACT_APP_API_VERSION: v1
        REACT_APP_ENV: production
        REACT_APP_DEBUG: 'false'
        REACT_APP_WEBSOCKET_URL: wss://admissions.example.edu
    networks:
      - admissions-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:1.25-alpine
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - admissions-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL database server for the application
  mysql:
    image: mysql:8.0
    volumes:
      - mysql-data:/var/lib/mysql
      - mysql-backups:/backups
    environment:
      MYSQL_DATABASE: admissions_platform
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    networks:
      - admissions-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: '4G'
        reservations:
          cpus: '1'
          memory: '2G'

  # Redis server for caching, session management, and queue processing
  redis:
    image: redis:7.0-alpine
    volumes:
      - redis-data:/data
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - admissions-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: '2G'
        reservations:
          cpus: '0.5'
          memory: '1G'

volumes:
  # Persistent volume for MySQL database data
  mysql-data:
    driver: local
  # Volume for database backups
  mysql-backups:
    driver: local
  # Persistent volume for Redis data
  redis-data:
    driver: local
  # Persistent volume for backend storage (uploads, logs, etc.)
  backend-storage:
    driver: local
  # Volume for Nginx logs
  nginx-logs:
    driver: local

networks:
  # Internal network for service communication
  admissions-network:
    driver: bridge