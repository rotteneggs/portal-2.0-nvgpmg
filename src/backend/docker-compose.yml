version: '3.8'

services:
  # Laravel backend application with API services
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    volumes:
      - .:/var/www/html
    ports:
      - "8000:80"
    depends_on:
      - mysql
      - redis
      - mailhog
      - minio
    environment:
      APP_ENV: local
      APP_DEBUG: true
      APP_URL: http://localhost:8000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_DATABASE: admissions_platform
      DB_USERNAME: admissions
      DB_PASSWORD: secret
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MAIL_HOST: mailhog
      MAIL_PORT: 1025
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      CACHE_DRIVER: redis
      FILESYSTEM_DISK: s3
      AWS_ACCESS_KEY_ID: minio
      AWS_SECRET_ACCESS_KEY: minio123
      AWS_DEFAULT_REGION: us-east-1
      AWS_BUCKET: admissions-documents
      AWS_ENDPOINT: http://minio:9000
      AWS_USE_PATH_STYLE_ENDPOINT: true
      CORS_ALLOWED_ORIGINS: http://localhost:3000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MySQL database server for the application
  mysql:
    image: mysql:8.0
    volumes:
      - mysql-data:/var/lib/mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: admissions_platform
      MYSQL_USER: admissions
      MYSQL_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: root_secret
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "admissions", "-psecret"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Redis server for caching, session management, and queue processing
  redis:
    image: redis:7.0-alpine
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Email testing service for local development
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web interface for viewing emails
    restart: unless-stopped

  # S3-compatible object storage for document storage in development
  minio:
    image: minio/minio:latest
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000" # MinIO API port
      - "9001:9001" # MinIO Console port
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    command: server /data --console-address ':9001'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Service to create required MinIO buckets on startup
  createbuckets:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: /bin/sh
    command: "-c 'sleep 5 && mc config host add myminio http://minio:9000 minio minio123 && mc mb --ignore-existing myminio/admissions-documents && mc policy set download myminio/admissions-documents && exit 0'"
    restart: on-failure

  # Web interface for MySQL database management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: root_secret
    depends_on:
      - mysql
    restart: unless-stopped

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local

networks:
  default:
    name: admissions-network
    driver: bridge